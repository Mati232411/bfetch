#!/bin/sh
#bfetch

bold=$(tput bold)
normal=$(tput sgr0)

#Variables
memory=$(sysctl -n hw.memsize 2>/dev/null)
if lsb_release 2>/dev/null; then
logo=$(lsb_release -i 2>/dev/null | cut -f 2-)
else
logo="Mac"
fi

#Start of real code
#Help
if  [[ "$1"  ==  "help" ]]
then
echo '''Usage: bfetch [options]
options:
  beta: Show GPU
  short: Display only CPU, Memory and Disk
  update: Update bfetch'''
exit 0
fi

#Update.
if [[ "$1" == "update" ]]
then
cd /tmp
git clone https://github.com/Mati232411/bfetch.git
echo "Run the following command to update bfetch:"
echo "${bold}cd /tmp/bfetch && sudo make install${normal}"
exit 0
fi


##Real OS

##Logo

cat /etc/bfetch/Logos/$logo 2>/dev/null

#OS

echo
echo "${bold}OS -->${normal}"
if OS=$(sw_vers -productVersion 2>/dev/null); then
  echo Mac OS $OS
else
  lsb_release -i | cut -f 2- 2>/dev/null
fi
echo
#Hostname

echo "${bold}Hostname -->${normal}"

cat /etc/hostname 2>/dev/null
hostname 2>/dev/null


#Kernel

echo
echo "${bold}Kernel -->${normal}"
uname -snrmv

#CPU

echo
echo "${bold}CPU -->${normal}"
if CPU=$(sysctl -a 2>/dev/null | grep machdep.cpu.brand_string ); then
  sysctl -a 2>/dev/null | grep machdep.cpu.brand_string | sed -e "s/^machdep.cpu.brand_string: //"
else
  lscpu 2>/dev/null | grep "Model name:" | sed -e "s/^Model name:          //"
fi
if CPU=$(sysctl -a 2>/dev/null | grep machdep.cpu.brand_string ); then
  CPU=$(sysctl -a 2>/dev/null | grep machdep.cpu.brand_string )
else
  system_profiler 2>/dev/null | grep "Processor Name:" | sed -e "s/^  Processor Name://"
fi


#GPU

echo
echo "${bold}GPU -->${normal}"
if GPU=$(lspci 2> /dev/null | grep "VGA compatible controller" ); then
  echo $GPU | sed -e "s/^VGA compatible controller//"
else
  system_profiler 2>/dev/null SPDisplaysDataType | grep "Chipset Model:" | sed -e "s/^      //" | sed -e "s/^Chipset Model: //"
fi

#Memory

echo
echo "${bold}Memory -->${normal}"
if memory=$(sysctl -n hw.memsize 2>/dev/null);
then
expr $memory / 1048576
else
free -h | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2
fi

echo
echo "${bold}DISK -->${normal}"

if [[ "$logo" == "Mac" ]]; then
df -h | grep /dev/disk
else
df -h --exclude={devtmpfs,tmpfs} 2>/dev/null
fi